export function isRelativeHref(href) {
    const pathname = typeof href === 'object' ? href.pathname : href;
    return pathname != null && !pathname.startsWith('/');
}
export function isLocalHref(href) {
    if (typeof href === 'object') {
        return href.host == null && href.hostname == null;
    }
    else {
        const hasProtocol = /^[a-z]+:/i.test(href);
        return !hasProtocol;
    }
}
export function localizeHref(href, locale, defaultLocale = locale, pathname) {
    if (!isLocalHref(href) || isRelativeHref(href)) {
        return href;
    }
    const isSwitchingLocale = locale !== defaultLocale;
    const isPathnamePrefixed = locale == null || hasPathnamePrefixed(locale, pathname);
    const shouldPrefix = isPathnamePrefixed || isSwitchingLocale;
    if (shouldPrefix && locale != null) {
        return prefixHref(href, locale);
    }
    return href;
}
export function prefixHref(href, locale) {
    let prefixedHref;
    if (typeof href === 'string') {
        prefixedHref = localizePathname(locale, href);
    }
    else {
        prefixedHref = { ...href };
        if (href.pathname) {
            prefixedHref.pathname = localizePathname(locale, href.pathname);
        }
    }
    return prefixedHref;
}
export function unlocalizePathname(pathname, locale) {
    return pathname.replace(new RegExp(`^/${locale}`), '') || '/';
}
export function localizePathname(locale, pathname) {
    let localizedHref = '/' + locale;
    if (pathname !== '/') {
        localizedHref += pathname;
    }
    return localizedHref;
}
export function hasPathnamePrefixed(locale, pathname) {
    const prefix = `/${locale}`;
    return pathname === prefix || pathname.startsWith(`${prefix}/`);
}
//# sourceMappingURL=utils.js.map