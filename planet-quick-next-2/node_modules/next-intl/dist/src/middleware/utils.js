export function getLocaleFromPathname(pathname) {
    return pathname.split('/')[1];
}
export function getHost(requestHeaders) {
    var _a, _b;
    return ((_b = (_a = requestHeaders.get('x-forwarded-host')) !== null && _a !== void 0 ? _a : requestHeaders.get('host')) !== null && _b !== void 0 ? _b : undefined);
}
export function isLocaleSupportedOnDomain(locale, domain) {
    return (domain.defaultLocale === locale ||
        !domain.locales ||
        domain.locales.includes(locale));
}
export function getBestMatchingDomain(curHostDomain, locale, domainConfigs) {
    let domainConfig;
    // Prio 1: Stay on current domain
    if (curHostDomain && isLocaleSupportedOnDomain(locale, curHostDomain)) {
        domainConfig = curHostDomain;
    }
    // Prio 2: Use alternative domain with matching default locale
    if (!domainConfig) {
        domainConfig = domainConfigs.find((cur) => cur.defaultLocale === locale);
    }
    // Prio 3: Use alternative domain with restricted matching locale
    if (!domainConfig) {
        domainConfig = domainConfigs.find((cur) => cur.locales != null && cur.locales.includes(locale));
    }
    // Prio 4: Stay on the current domain if it supports all locales
    if (!domainConfig && (curHostDomain === null || curHostDomain === void 0 ? void 0 : curHostDomain.locales) == null) {
        domainConfig = curHostDomain;
    }
    // Prio 5: Use alternative domain that supports all locales
    if (!domainConfig) {
        domainConfig = domainConfigs.find((cur) => !cur.locales);
    }
    return domainConfig;
}
//# sourceMappingURL=utils.js.map