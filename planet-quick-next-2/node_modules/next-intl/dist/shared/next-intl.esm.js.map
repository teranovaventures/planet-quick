{"version":3,"file":"next-intl.esm.js","sources":["../../src/shared/NextIntlClientProvider.tsx"],"sourcesContent":["'use client';\n\nimport {useRouter} from 'next/router';\nimport React, {ComponentProps} from 'react';\nimport {IntlProvider} from 'use-intl';\n\ntype Props = Omit<ComponentProps<typeof IntlProvider>, 'locale' | 'now'> & {\n  locale?: string;\n  /** If a string is supplied, make sure this conforms to the ISO 8601 format (YYYY-MM-DDTHH:mm:ss.sssZ */\n  now?: Date | string;\n};\n\nexport default function NextIntlClientProvider({\n  children,\n  locale,\n  now,\n  ...rest\n}: Props) {\n  let router;\n  try {\n    // Reading from context is practically ok to do conditionally\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    router = useRouter();\n  } catch (error) {\n    // Calling `useRouter` is not supported in the app folder\n  }\n\n  // The router can be undefined if used in a context outside\n  // of Next.js (e.g. unit tests, Storybook, ...)\n  if (!locale && router) {\n    locale = router.locale;\n  }\n\n  // Currently RSC serialize dates to strings, therefore make sure we have\n  // a date object. We might be able to remove this once more types have\n  // first-class serialization support (https://github.com/facebook/react/issues/25687)\n  if (typeof now === 'string') {\n    now = new Date(now);\n  }\n\n  if (!locale) {\n    throw new Error(\n      process.env.NODE_ENV !== 'production'\n        ? \"Couldn't determine locale. Please pass an explicit `locale` prop the provider, or if you're using the `pages` folder, use internationalized routing (https://nextjs.org/docs/advanced-features/i18n-routing).\"\n        : undefined\n    );\n  }\n\n  return (\n    <IntlProvider locale={locale} now={now} {...rest}>\n      {children}\n    </IntlProvider>\n  );\n}\n"],"names":["_excluded","NextIntlClientProvider","_ref","children","locale","now","rest","_objectWithoutPropertiesLoose","router","useRouter","error","Date","Error","process","env","NODE_ENV","undefined","React","createElement","IntlProvider","_extends"],"mappings":";;;;;AAAa,IAAAA,SAAA,GAAA,CAAA,UAAA,EAAA,QAAA,EAAA,KAAA,CAAA,CAAA;AAYW,SAAAC,sBAAsBA,CAAAC,IAAA,EAKtC;AAAA,EAAA,IAJNC,QAAQ,GAAAD,IAAA,CAARC,QAAQ;IACRC,MAAM,GAAAF,IAAA,CAANE,MAAM;IACNC,GAAG,GAAAH,IAAA,CAAHG,GAAG;AACAC,IAAAA,IAAI,GAAAC,6BAAA,CAAAL,IAAA,EAAAF,SAAA,CAAA,CAAA;AAEP,EAAA,IAAIQ,MAAM,CAAA;EACV,IAAI;AACF;AACA;IACAA,MAAM,GAAGC,SAAS,EAAE,CAAA;GACrB,CAAC,OAAOC,KAAK,EAAE;AACd;AAAA,GAAA;AAGF;AACA;AACA,EAAA,IAAI,CAACN,MAAM,IAAII,MAAM,EAAE;IACrBJ,MAAM,GAAGI,MAAM,CAACJ,MAAM,CAAA;AACvB,GAAA;AAED;AACA;AACA;AACA,EAAA,IAAI,OAAOC,GAAG,KAAK,QAAQ,EAAE;AAC3BA,IAAAA,GAAG,GAAG,IAAIM,IAAI,CAACN,GAAG,CAAC,CAAA;AACpB,GAAA;EAED,IAAI,CAACD,MAAM,EAAE;AACX,IAAA,MAAM,IAAIQ,KAAK,CACbC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GACjC,+MAA+M,GAC/MC,SAAS,CACd,CAAA;AACF,GAAA;AAED,EAAA,OACEC,KAAC,CAAAC,aAAA,CAAAC,YAAY,EAAAC,QAAA,CAAA;AAAChB,IAAAA,MAAM,EAAEA,MAAM;AAAEC,IAAAA,GAAG,EAAEA,GAAAA;GAASC,EAAAA,IAAI,CAC7CH,EAAAA,QAAQ,CACI,CAAA;AAEnB;;;;"}