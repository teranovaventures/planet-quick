import { objectWithoutPropertiesLoose as _objectWithoutPropertiesLoose, extends as _extends } from '../_virtual/next-intl.esm.js';
import { useRouter } from 'next/router';
import React from 'react';
import { IntlProvider } from 'use-intl';

var _excluded = ["children", "locale", "now"];
function NextIntlClientProvider(_ref) {
  var children = _ref.children,
    locale = _ref.locale,
    now = _ref.now,
    rest = _objectWithoutPropertiesLoose(_ref, _excluded);
  var router;
  try {
    // Reading from context is practically ok to do conditionally
    // eslint-disable-next-line react-hooks/rules-of-hooks
    router = useRouter();
  } catch (error) {
    // Calling `useRouter` is not supported in the app folder
  }
  // The router can be undefined if used in a context outside
  // of Next.js (e.g. unit tests, Storybook, ...)
  if (!locale && router) {
    locale = router.locale;
  }
  // Currently RSC serialize dates to strings, therefore make sure we have
  // a date object. We might be able to remove this once more types have
  // first-class serialization support (https://github.com/facebook/react/issues/25687)
  if (typeof now === 'string') {
    now = new Date(now);
  }
  if (!locale) {
    throw new Error(process.env.NODE_ENV !== 'production' ? "Couldn't determine locale. Please pass an explicit `locale` prop the provider, or if you're using the `pages` folder, use internationalized routing (https://nextjs.org/docs/advanced-features/i18n-routing)." : undefined);
  }
  return React.createElement(IntlProvider, _extends({
    locale: locale,
    now: now
  }, rest), children);
}

export { NextIntlClientProvider as default };
//# sourceMappingURL=next-intl.esm.js.map
