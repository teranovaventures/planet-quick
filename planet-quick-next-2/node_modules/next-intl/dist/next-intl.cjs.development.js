'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var useIntl = require('use-intl');
var router = require('next/router');
var React = require('react');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}

var _excluded = ["children", "locale", "now"];
function NextIntlClientProvider(_ref) {
  var children = _ref.children,
    locale = _ref.locale,
    now = _ref.now,
    rest = _objectWithoutPropertiesLoose(_ref, _excluded);
  var router$1;
  try {
    // Reading from context is practically ok to do conditionally
    // eslint-disable-next-line react-hooks/rules-of-hooks
    router$1 = router.useRouter();
  } catch (error) {
    // Calling `useRouter` is not supported in the app folder
  }
  // The router can be undefined if used in a context outside
  // of Next.js (e.g. unit tests, Storybook, ...)
  if (!locale && router$1) {
    locale = router$1.locale;
  }
  // Currently RSC serialize dates to strings, therefore make sure we have
  // a date object. We might be able to remove this once more types have
  // first-class serialization support (https://github.com/facebook/react/issues/25687)
  if (typeof now === 'string') {
    now = new Date(now);
  }
  if (!locale) {
    throw new Error("Couldn't determine locale. Please pass an explicit `locale` prop the provider, or if you're using the `pages` folder, use internationalized routing (https://nextjs.org/docs/advanced-features/i18n-routing)." );
  }
  return React__default["default"].createElement(useIntl.IntlProvider, _extends({
    locale: locale,
    now: now
  }, rest), children);
}

exports.NextIntlClientProvider = NextIntlClientProvider;
exports.NextIntlProvider = NextIntlClientProvider;
Object.keys(useIntl).forEach(function (k) {
  if (k !== 'default' && !exports.hasOwnProperty(k)) Object.defineProperty(exports, k, {
    enumerable: true,
    get: function () { return useIntl[k]; }
  });
});
//# sourceMappingURL=next-intl.cjs.development.js.map
